#!/usr/bin/env python3
"""
Retrieve the latest three news stories from The New York Times, extract key details, and rewrite each in a Gossip Girl style with snappy, sassy language.

This file was auto-generated by kernel_compose.py
"""

import asyncio
# import json
from mcp_agent.core.fastagent import FastAgent
# from pathlib import Path
# from typing import List, Dict, Any

# Create the FastAgent application
fast = FastAgent(name="Kernel Workflow")

@fast.agent(
    name="Fetcher",
    instruction="""Obtain the top three latest news articles from The New York Times using API or RSS feeds.

    You are acting as a Data Retrieval Agent
    """,
    servers=["mcp-searxng", "mcp-server-airbnb", "duckduckgo-mcp-server"],
    model="openai.gpt-4.1-nano",
)
@fast.agent(
    name="Extracter",
    instruction="""Parse retrieved data to extract relevant info and summarize if necessary.

    You are acting as a Data Processing Agent
    """,
    model="openai.gpt-4.1-nano",
)
@fast.agent(
    name="Rewriter",
    instruction="""Transform extracted summaries into Gossip Girl tone with witty, sassy language.

    You are acting as a Stylistic Rewriter
    """,
    model="openai.gpt-4.1-nano",
)

@fast.chain(
    name="WorkflowChain",
    sequence=["Fetcher", "Extracter", "Rewriter"],
    instruction="Retrieve the latest three news stories from The New York Times, extract key details, and rewrite each in a Gossip Girl style with snappy, sassy language.",
    cumulative=False,
)

async def main() -> None:
    async with fast.run() as agent:
        # Run the workflow and get the final result
        result = await agent.WorkflowChain.send("")

        # Print the result
        # print("\nWorkflow completed!\n")
        # print(result)

        # Start interactive mode with the last agent in the chain
        # await agent.Rewrite in Gossip Girl Style.interactive()

if __name__ == "__main__":
    asyncio.run(main())
